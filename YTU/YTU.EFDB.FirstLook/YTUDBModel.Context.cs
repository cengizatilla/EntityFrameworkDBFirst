//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YTU.EFDB.FirstLook
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class YTUEFEntities : DbContext
    {
        public YTUEFEntities()
            : base("name=YTUEFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerProductList> CustomerProductLists { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<CustomerHistory> CustomerHistories { get; set; }
    
        public virtual int addNewCustomerProductList(Nullable<int> customerId, Nullable<int> productId, Nullable<int> amount, Nullable<decimal> listPrice, Nullable<System.DateTime> createDate)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addNewCustomerProductList", customerIdParameter, productIdParameter, amountParameter, listPriceParameter, createDateParameter);
        }
    
        public virtual int deleteCustomerProductList(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCustomerProductList", customerIdParameter);
        }
    
        public virtual ObjectResult<getAllCustomers_Result> getAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllCustomers_Result>("getAllCustomers");
        }
    
        public virtual ObjectResult<getCustomerById_Result> getCustomerById(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCustomerById_Result>("getCustomerById", customerIDParameter);
        }
    }
}
